# -*- coding: utf-8 -*-
"""
Created on Fri Aug 12 12:48:46 2022

@author: chene
"""


# for numpy
import numpy as np
import numpy.matlib

from AOPA_Major import AOPA_Major

def p2l_s(X, Y, D, tol):
    """
    Computes the Procrustean point-line registration between X and Y+nD with
    anisotropic Scaling,


    where X is a mxn matrix, m is typically 3
          Y is a mxn matrix denoting line origin, same dimension as X
          D is a mxn normalized matrix denoting line direction

          R is a mxm rotation matrix,
          A is a mxm diagonal scaling matrix, and
          t is a mx1 translation vector
          Q is a mxn fiducial on line that is closest to X after registration
          fre is the fiducial registration error
          
    based on the Majorization Principle
    """
    [m,n] = X.shape
    err = np.Infinity
    E_old = 1000000 * np.ones((m,n))
    e = np.ones((1,n))
    # intialization
    Q = Y
    # normalize the line orientation just in case
    Dir = D/np.linalg.norm(D, ord=2,axis=0,keepdims=True)
    while err > tol:
        [R, t, A] = AOPA_Major(X, Q, tol)
        E  = Q-np.matmul(R,np.matmul(A,X))-np.matmul(t,e)
        # project point to line
        Q = Y+Dir*np.matlib.repmat(np.einsum('ij,ij->j',np.matmul(R,np.matmul(A,X))+np.matmul(t,e)-Y,Dir),m,1)       
        err = np.linalg.norm(E-E_old)
        E_old = E
    E = Q - np.matmul(R, np.matmul(A,X)) - np.matmul(t,e)
    fre = np.sum(np.linalg.norm(E,ord=1,axis=0,keepdims=True))/X.shape[1]
    return[R,t,A,Q,fre]

usPoints = np.array([[42.671831621775326, 72.10281797582417, 0.0], [40.23802876860744, 71.5619728973424, 0.0], [41.049296386330056, 72.64366305430592, 0.0], [10.7619719913518, 48.846479601108705, 0.0], [5.623943745775108, 48.03521198338607, 0.0], [13.19577484451969, 52.09155007199923, 0.0], [119.47183276618452, 40.4633808846415, 0.0], [102.16479025476836, 43.43802881629115, 0.0], [105.95070580414065, 43.97887389477291, 0.0], [83.7760575863887, 73.9957757505103, 0.0], [81.88309981170255, 69.93943766189714, 0.0], [85.12817028259309, 73.9957757505103, 0.0], [51.05493033824253, 61.55633894542994, 0.0], [81.88309981170255, 38.30000057071448, 0.0], [41.31971892557094, 41.81549358084589, 0.0], [69.98450808510395, 37.488732952991846, 0.0], [31.854930052140233, 44.51971897325466, 0.0], [109.46619881427203, 43.97887389477291, 0.0], [48.35070494583376, 62.63802910239345, 0.0], [50.784507799001645, 44.51971897325466, 0.0], [53.7591557306513, 42.62676119856852, 0.0], [71.33662078130834, 38.84084564919624, 0.0]])
#print(usPoints)
originArr = np.array([[-36.50662959700003, -175.4451942549, 162.3629588922], [-7.303872232799904, -167.371107042, 149.97626905216], [54.83111357300004, -251.74909748049998, 85.94484956399992], [-38.55839463999996, -224.14279234999998, 107.69742537500002], [-72.41557550799985, -207.47146213199997, 15.310249981000027], [-67.03745345900006, -167.3134948359999, 108.25542605300001], [32.76296157390357, -189.8482890296001, 116.49783862590002], [-1.389686561000076, -212.74537430700002, 54.420303486799924], [-19.81337156500001, -226.824250408, 12.26880272699998], [-48.638848207000024, -194.7761231380001, 45.06777101559999], [-44.92487372800008, -187.715232194, 57.94507870780001], [-13.21887837600002, -164.1670278782, 61.56612150939998], [-44.119804305000116, -176.309209958, 119.37596952339997], [4.104125058099953, -189.42332747242003, 127.8979816341], [-42.01424314100018, -201.2958471751, 102.50124672128], [2.8570674836000762, -174.38626889259996, 171.4399075801], [-93.2942789302, -157.706591253, 70.66893557600002], [49.93956711030023, -201.7794553474, 167.6080952444], [-84.1134391968003, -169.9732446996, 130.62724543184004], [-52.146932320760016, -118.41811588350001, 172.09964759399998], [-102.00977435980008, -164.06816166600004, 105.609551297], [-33.0750384439998, -160.047783015, 207.06006440499996]])
#print(originArr)
normDirecArr = np.array([[0.09269599922163348, 0.07556997986697507, -0.9928225570922569], [-0.08431233304202562, 0.04213647535072279, -0.995548064104405], [-0.4893409369980259, 0.5645049986245231, -0.6647402153516977], [-0.19897558159272538, 0.3150725050827739, -0.9279752337593401], [-0.1586236293947057, 0.5413477239146001, -0.8257004214666074], [0.16456433688552627, -0.2843261245915767, -0.9444984033338343], [-0.021187856314089235, -0.036558514636685906, -0.9991068760409834], [0.3018151371694681, 0.19107006357984707, -0.9340234760320366], [0.6195001704068476, 0.4529575650666487, -0.6411310186808775], [0.5688636507672519, 0.3171408282553925, -0.7588253039331501], [0.49992101734328453, 0.19337664619223763, -0.8442064019692682], [0.27257747070143057, 0.04665412406510964, -0.9610020370289171], [0.15883205118492702, -0.016218624273138808, -0.9871723941354295], [0.02789062348755837, 0.011939515361199943, -0.9995396745974693], [0.1220929854272831, 0.05326468227732492, -0.9910883797781854], [0.016930167173294645, -0.08291622534927767, -0.9964127001465367], [0.4859550625521147, -0.2720660527457327, -0.8305586915584754], [-0.043328219362370066, 0.08969752463561663, -0.9950261400994093], [0.3922458773489835, -0.0058496090162887425, -0.919841809104741], [0.1922698143622809, -0.32937593419807687, -0.9244153895604714], [0.4498097423935641, -0.22336840505231897, -0.864741436079143], [0.15886631447883237, -0.14447292018684302, -0.9766724473725051]])
#print(normDirecArr)
print("START")
result = p2l_s(usPoints, originArr, normDirecArr, 1e-6)[0]
print("END")
print(result)